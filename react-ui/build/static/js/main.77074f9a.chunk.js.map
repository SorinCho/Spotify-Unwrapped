{"version":3,"sources":["components/PopularitySwarmPlot.jsx","components/FollowersSwarmPlot.jsx","components/ErrorMessage.jsx","services/calculations.js","services/base.js","pages/Home.jsx","AppRouter.jsx","App.js","reportWebVitals.js","index.js"],"names":["processArtists","data","limit","length","map","artist","i","id","name","group","popularity","volume","processTracks","track","withSizes","isMobile","width","isTracks","groups","value","valueFormat","valueScale","type","min","max","reverse","size","key","values","sizes","layout","simulationIterations","borderColor","from","modifiers","margin","top","right","bottom","left","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","motionStiffness","motionDamping","processFollowers","followers","total","processDuration","duration","duration_ms","ErrorMessage","message","round","num","Math","Number","EPSILON","avgDuration","tracks","reduce","sum","avgFollowers","artists","avgPopularity","aggGenres","counts","forEach","genres","genre","sortable","Object","keys","push","sort","a","b","instance","axios","create","baseURL","process","getData","get","withCredentials","headers","Accept","createPlaylist","tracksData","timeRange","slice","uris","uri","post","viewOptions","label","limitOptions","timeOptions","BASE_URL","Home","props","handleLogoutClick","window","open","setState","loading","authenticated","handleSignInClick","state","error","userData","medium","artistsData","view","waitingPlaylist","this","handleUpdate","then","response","status","Error","responseJson","catch","alert","err","console","log","className","display_name","options","onChange","e","handleLimitClick","placeholder","controlClassName","placeholderClassName","menuClassName","arrowClassName","arrowClosed","arrowOpen","handleViewClick","handleTimeRangeClick","x","explicit","join","onClick","onClickCreatePlaylist","disabled","Component","AppRouter","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77074f9a.chunk.js","sourcesContent":["import React from 'react';\nimport { ResponsiveSwarmPlot } from '@nivo/swarmplot';\nimport PropTypes from 'prop-types';\nimport withSizes from 'react-sizes';\n\nconst processArtists = (data) => {\n  const limit = data.length;\n  return data.map((artist, i) => ({\n    id: artist.name,\n    group: 'Artist',\n    popularity: artist.popularity,\n    volume: ((limit - i) / limit) * 30,\n  }));\n};\n\nconst processTracks = (data) => {\n  const limit = data.length;\n  return data.map((track, i) => ({\n    id: track.name,\n    group: 'Track',\n    popularity: track.popularity,\n    volume: ((limit - i) / limit) * 30,\n  }));\n};\n\nconst mapSizesToProps = ({ width }) => ({\n  isMobile: width < 576,\n});\n\nconst PopularitySwarmPlot = ({ data, isTracks, isMobile }) => (\n  <ResponsiveSwarmPlot\n    data={isTracks === 'true' ? processTracks(data) : processArtists(data)}\n    groups={isTracks === 'true' ? ['Track'] : ['Artist']}\n    value=\"popularity\"\n    valueFormat=\"d\"\n    valueScale={{ type: 'linear', min: 0, max: 100, reverse: false }}\n    size={{ key: 'volume', values: [4, 20], sizes: [6, 20] }}\n    layout={isMobile ? 'vertical' : 'horizontal'}\n    // colors={{ scheme: 'set2' }}\n    simulationIterations={100}\n    borderColor={{\n      from: 'color',\n      modifiers: [\n        ['darker', 0.6],\n        ['opacity', 0.5],\n      ],\n    }}\n    margin={\n      isMobile\n        ? { top: 40, right: 50, bottom: 40, left: 50 }\n        : { top: 60, right: 100, bottom: 90, left: 100 }\n    }\n    axisBottom={{\n      orient: 'bottom',\n      tickSize: 10,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'Popularity',\n      legendPosition: 'middle',\n      legendOffset: 46,\n    }}\n    motionStiffness={50}\n    motionDamping={10}\n  />\n);\n\nPopularitySwarmPlot.propTypes = {\n  data: PropTypes.array, // eslint-disable-line\n  isTracks: PropTypes.string, // eslint-disable-line\n  isMobile: PropTypes.bool, // eslint-disable-line\n};\n\nexport default withSizes(mapSizesToProps)(PopularitySwarmPlot);\n","import React from 'react';\nimport { ResponsiveSwarmPlot } from '@nivo/swarmplot';\nimport PropTypes from 'prop-types';\nimport withSizes from 'react-sizes';\n\nconst processFollowers = (data) => {\n  const limit = data.length;\n  return data.map((artist, i) => ({\n    id: artist.name,\n    group: 'Artist',\n    followers: artist.followers.total / 1000000,\n    volume: ((limit - i) / limit) * 30,\n  }));\n};\nconst processDuration = (data) => {\n  const limit = data.length;\n  return data.map((track, i) => ({\n    id: track.name,\n    group: 'Track',\n    duration: track.duration_ms / 60000,\n    volume: ((limit - i) / limit) * 30,\n  }));\n};\n\nconst mapSizesToProps = ({ width }) => ({\n  isMobile: width < 576,\n});\n\nconst FollowersSwarmPlot = ({ data, isTracks, isMobile }) => (\n  <ResponsiveSwarmPlot\n    data={isTracks === 'true' ? processDuration(data) : processFollowers(data)}\n    groups={isTracks === 'true' ? ['Track'] : ['Artist']}\n    value={isTracks === 'true' ? 'duration' : 'followers'}\n    valueFormat={isTracks === 'true' ? '.2f' : '.2f'}\n    valueScale={{ type: 'linear', min: 'auto', max: 'auto', reverse: false }}\n    size={{ key: 'volume', values: [4, 20], sizes: [6, 20] }}\n    layout={isMobile ? 'vertical' : 'horizontal'}\n    // colors={{ scheme: 'set2' }}\n    simulationIterations={100}\n    borderColor={{\n      from: 'color',\n      modifiers: [\n        ['darker', 0.6],\n        ['opacity', 0.5],\n      ],\n    }}\n    margin={\n      isMobile\n        ? { top: 40, right: 50, bottom: 40, left: 50 }\n        : { top: 60, right: 100, bottom: 90, left: 100 }\n    }\n    axisBottom={\n      isTracks === 'true'\n        ? {\n            orient: 'bottom',\n            tickSize: 10,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Duration (minutes)',\n            legendPosition: 'middle',\n            legendOffset: 46,\n          }\n        : {\n            orient: 'bottom',\n            tickSize: 10,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Followers (millions)',\n            legendPosition: 'middle',\n            legendOffset: 46,\n          }\n    }\n    motionStiffness={50}\n    motionDamping={10}\n  />\n);\n\nFollowersSwarmPlot.propTypes = {\n  data: PropTypes.array, // eslint-disable-line\n  isTracks: PropTypes.string, // eslint-disable-line\n  isMobile: PropTypes.bool, // eslint-disable-line\n};\n\nexport default withSizes(mapSizesToProps)(FollowersSwarmPlot);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ErrorMessage = (message) =>\n  message ? (\n    <div />\n  ) : (\n    <div>\n      <span>{message}</span>\n    </div>\n  );\n\nErrorMessage.propTypes = {\n  message: PropTypes.string, // eslint-disable-line\n};\n\nexport default ErrorMessage;\n","function round(num) {\n  return Math.round((num + Number.EPSILON) * 100) / 100;\n}\n\nexport function avgDuration(tracks) {\n  const total = tracks.reduce((sum, { duration_ms }) => sum + duration_ms, 0); //eslint-disable-line\n  return round(total / tracks.length / 60000);\n}\n\nexport function pctExplicit(tracks) {\n  const total = tracks.filter((track) => track.explicit === true).length;\n  return round(total / tracks.length);\n}\n\nexport function avgFollowers(artists) {\n  const total = artists.reduce(\n    (sum, { followers }) => sum + followers.total,\n    0\n  );\n  return round(total / artists.length);\n}\n\nexport function avgPopularity(artists) {\n  const total = artists.reduce((sum, { popularity }) => sum + popularity, 0);\n  return round(total / artists.length);\n}\n\nexport function aggGenres(artists) {\n  const counts = {};\n  artists.forEach((artist) => {\n    artist.genres.forEach((genre) => {\n      counts[genre] = counts[genre] ? counts[genre] + 1 : 1;\n    });\n  });\n  const sortable = [];\n  // counts.forEach((genre) => sortable.push([genre, counts[genre]]));\n  Object.keys(counts).forEach((genre) => sortable.push([genre, counts[genre]]));\n  // for (const genre in Object.keys(counts)) {\n  //   sortable.push([genre, counts[genre]]);\n  // }\n  sortable.sort((a, b) => b[1] - a[1]);\n  return sortable;\n}\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  // headers: { 'Access-Control-Allow-Origin': '*' },\n});\n\nexport async function getData() {\n  return instance.get('/auth/login/success', {\n    withCredentials: true,\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Credentials': true,\n    },\n  });\n}\n\nexport async function createPlaylist(tracksData, timeRange, limit) {\n  const tracks = tracksData[timeRange].slice(0, limit);\n  const uris = tracks.map((track) => track.uri);\n  const data = { timeRange, tracks: uris };\n  return instance.post('/auth/createTracksPlaylist', data, {\n    withCredentials: true,\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Credentials': true,\n    },\n  });\n}\n","import React, { Component } from 'react';\nimport Dropdown from 'react-dropdown';\n// import PropTypes from 'prop-types';\nimport PopularitySwarmPlot from '../components/PopularitySwarmPlot';\nimport FollowersSwarmPlot from '../components/FollowersSwarmPlot';\nimport ErrorMessage from '../components/ErrorMessage';\n// import Login from '../Login';\nimport './Home.scss';\nimport 'react-dropdown/style.css';\nimport {\n  avgDuration,\n  avgPopularity,\n  pctExplicit, // eslint-disable-line\n  avgFollowers,\n  aggGenres,\n} from '../services/calculations';\nimport { getData, createPlaylist } from '../services/base';\n\nconst viewOptions = [\n  { value: 'tracks', label: 'Tracks' },\n  { value: 'artists', label: 'Artists' },\n];\nconst limitOptions = [\n  { value: 10, label: '10' },\n  { value: 20, label: '20' },\n  { value: 50, label: '50' },\n];\nconst timeOptions = [\n  { value: 'short', label: '1 month' },\n  { value: 'medium', label: '6 months' },\n  { value: 'long', label: 'All Time' },\n];\nconst BASE_URL = process.env.REACT_APP_BASE_URL;\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      userData: {},\n      tracksData: {\n        medium: [],\n      },\n      artistsData: {\n        medium: [],\n      },\n      limit: 20,\n      timeRange: 'medium',\n      view: 'tracks',\n      waitingPlaylist: false,\n      loading: true,\n      authenticated: false,\n    };\n  }\n\n  componentDidMount() {\n    // Fetch does not send cookies. So you should add credentials: 'include'\n    this.handleUpdate();\n  }\n\n  handleLimitClick(limit) {\n    const { value } = limit;\n    this.setState({ limit: value });\n  }\n\n  handleTimeRangeClick(timeRange) {\n    const { value } = timeRange;\n    this.setState({ timeRange: value });\n  }\n\n  handleViewClick(view) {\n    const { value } = view;\n    this.setState({ view: value });\n  }\n\n  handleLogoutClick = () => {\n    // Logout using Twitter passport api\n    // Set authenticated state to false in the HomePage\n    window.open(`${BASE_URL}/auth/logout`, '_self');\n    // const { handleNotAuthenticated } = this.props;\n    this.setState({ loading: true, authenticated: false });\n    // handleNotAuthenticated();\n    // this.props.handleNotAuthenticated();\n  };\n\n  handleSignInClick = () => {\n    // Authenticate using via passport api in the backend\n    // Open Twitter login page\n    // Upon successful login, a cookie session will be stored in the client\n    window.open(`${BASE_URL}/auth/spotify`, '_self');\n    this.setState({ loading: true });\n  };\n\n  async handleUpdate() {\n    getData()\n      .then((response) => {\n        if (response.status === 200) return response.data;\n        throw new Error('failed to authenticate user');\n      })\n      .then((responseJson) => {\n        this.setState({\n          userData: responseJson.userData,\n          tracksData: responseJson.tracksData,\n          artistsData: responseJson.artistsData,\n          loading: false,\n          authenticated: true,\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: 'Failed to authenticate user',\n          loading: false,\n          authenticated: false,\n        });\n      });\n  }\n\n  async onClickCreatePlaylist() {\n    await this.setState({ waitingPlaylist: true });\n    const { tracksData, timeRange, limit } = this.state;\n    createPlaylist(tracksData, timeRange, limit)\n      .then((response) => {\n        if (response.status === 200) alert('Playlist successfully created!'); // eslint-disable-next-line\n        this.setState({\n          waitingPlaylist: false,\n        });\n      })\n      .catch((err) => {\n        alert('Error when creating playlist'); // eslint-disable-next-line\n        console.log(err);\n        this.setState({\n          waitingPlaylist: false,\n        });\n      });\n  }\n\n  render() {\n    const {\n      userData,\n      artistsData,\n      tracksData,\n      view,\n      timeRange,\n      limit,\n      waitingPlaylist,\n      error,\n      loading,\n      authenticated,\n    } = this.state;\n    const tracks = tracksData[timeRange].slice(0, limit);\n    const artists = artistsData[timeRange].slice(0, limit);\n    return (\n      <>\n        {loading && <div>Loading...</div>}\n        {!loading && authenticated && (\n          <div className=\"big-wrapper\">\n            <div className=\"home-page\">\n              <div className=\"sub-wrapper\">\n                <h2>{`Welcome ${userData.display_name}!`}</h2>\n                <div id=\"select-bar\">\n                  <div className=\"sub-select\">\n                    <div className=\"select-text\">Top</div>\n                    <Dropdown\n                      options={limitOptions}\n                      value={limitOptions[1]}\n                      onChange={(e) => this.handleLimitClick(e)}\n                      placeholder=\"Select an option\"\n                      className=\"dropdown-class\"\n                      controlClassName=\"dropdown-control\"\n                      placeholderClassName=\"dropdown-placeholder\"\n                      menuClassName=\"dropdown-menu\"\n                      arrowClassName=\"dropdown\"\n                      arrowClosed={<span className=\"arrow-closed\" />}\n                      arrowOpen={<span className=\"arrow-open\" />}\n                    />\n                    <Dropdown\n                      options={viewOptions}\n                      value={viewOptions[0]}\n                      onChange={(e) => this.handleViewClick(e)}\n                      placeholder=\"Select an option\"\n                      className=\"dropdown-class\"\n                      controlClassName=\"dropdown-control\"\n                      placeholderClassName=\"dropdown-placeholder\"\n                      menuClassName=\"dropdown-menu\"\n                      arrowClassName=\"dropdown\"\n                      arrowClosed={<span className=\"arrow-closed\" />}\n                      arrowOpen={<span className=\"arrow-open\" />}\n                    />\n                  </div>\n                  <div className=\"sub-select\">\n                    <div className=\"select-text\">Last</div>\n                    <Dropdown\n                      options={timeOptions}\n                      value={timeOptions[1]}\n                      onChange={(e) => this.handleTimeRangeClick(e)}\n                      placeholder=\"Select an option\"\n                      className=\"dropdown-class\"\n                      controlClassName=\"dropdown-control dropdown-control-limit\"\n                      placeholderClassName=\"dropdown-placeholder\"\n                      menuClassName=\"dropdown-menu\"\n                      arrowClassName=\"dropdown\"\n                      arrowClosed={<span className=\"arrow-closed\" />}\n                      arrowOpen={<span className=\"arrow-open\" />}\n                    />\n                  </div>\n                </div>\n                {view === 'artists' ? (\n                  <div className=\"data\">\n                    <div className=\"plot-container\">\n                      <p className=\"averages\">{`Average popularity: ${avgPopularity(\n                        artists\n                      )}`}</p>\n                      <div className=\"swarmplot\">\n                        <PopularitySwarmPlot data={artists} isTracks=\"false\" />\n                      </div>\n                      <p className=\"averages\">{`Average followers: ${avgFollowers(\n                        artists\n                      )}`}</p>\n                      <div className=\"swarmplot\">\n                        <FollowersSwarmPlot data={artists} isTracks=\"false\" />\n                      </div>\n                    </div>\n                    <div>\n                      <p>Top Genres</p>\n                      <ol>\n                        {aggGenres(artists)\n                          .slice(0, 5)\n                          .map((genre) => (\n                            <li key={`${genre[0]}`}>{`${genre[0]}`}</li> // ${genre[1]}\n                          ))}\n                      </ol>\n                    </div>\n                    <div>\n                      <p>Artists</p>\n                      <ol>\n                        {artists.map((x) => (\n                          // <li\n                          //   key={`artist-${x.name}`}\n                          // >{`${x.name}    ${x.followers.total}   ${x.popularity} ${x.genres}`}</li>\n                          <li key={`artist-${x.name}`}>{`${x.name}`}</li>\n                        ))}\n                      </ol>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"data\">\n                    <div className=\"plot-container\">\n                      <p className=\"averages\">{`Average popularity: ${avgPopularity(\n                        tracks\n                      )}`}</p>\n                      <div className=\"swarmplot\">\n                        <PopularitySwarmPlot data={tracks} isTracks=\"true\" />\n                      </div>\n                      <p className=\"averages\">{`Average duration: ${avgDuration(\n                        tracks\n                      )} minutes`}</p>\n                      <div className=\"swarmplot\">\n                        <FollowersSwarmPlot data={tracks} isTracks=\"true\" />\n                      </div>\n                      {/* <p>{`Percent explicit: ${pctExplicit(tracks)}`}</p> */}\n                    </div>\n                    <div>\n                      <p>Tracks</p>\n                      <ol>\n                        {tracks.map((x) => (\n                          <li\n                            key={`track-${x.name}`}\n                            className={`${x.explicit}`}\n                          >\n                            <span className=\"track-name\">{x.name}</span>\n\n                            <span className=\"track-artist\">\n                              {` - `}\n                              {x.artists\n                                .map((artist) => artist.name)\n                                .join(', ')}\n                            </span>\n                          </li>\n                        ))}\n                      </ol>\n                    </div>\n                    <div className=\"create-container\">\n                      <button\n                        type=\"button\"\n                        onClick={() => this.onClickCreatePlaylist()}\n                        id=\"create\"\n                        disabled={waitingPlaylist}\n                      >\n                        {/* {loading && (\n                        <i\n                          className=\"fa fa-refresh fa-spin\"\n                          style={{ marginRight: '5px' }}\n                        />\n                      )} */}\n                        {waitingPlaylist && (\n                          <span className=\"create-text\">\n                            Creating Playlist...\n                          </span>\n                        )}\n                        {!waitingPlaylist && (\n                          <span className=\"create-text button-text\">\n                            Create Playlist\n                          </span>\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                )}\n                <button\n                  id=\"logout\"\n                  type=\"button\"\n                  className=\"log\"\n                  onClick={this.handleLogoutClick}\n                >\n                  <span className=\"button-text\">LOGOUT</span>\n                </button>\n              </div>\n            </div>\n\n            <ErrorMessage message={error} />\n          </div>\n        )}\n        {!loading && !authenticated && (\n          <div className=\"big-wrapper\">\n            <h1>Spotify Unwrapped</h1>\n            <button\n              id=\"login\"\n              type=\"button\"\n              className=\"log\"\n              onClick={this.handleSignInClick}\n            >\n              <span className=\"button-text\">LOGIN</span>\n            </button>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\n// Home.propTypes = {\n//   authenticated: PropTypes.bool.isRequired,\n//   handleAuthenticated: PropTypes.func.isRequired,\n//   handleNotAuthenticated: PropTypes.func.isRequired,\n// };\n","import React from 'react';\nimport Home from './pages/Home';\n// import Login from './pages/Login';\nimport './components/Header.scss';\n\nexport default function AppRouter() {\n  return (\n    <div className=\"page\">\n      <Home />\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.scss';\nimport AppRouter from './AppRouter';\n\nfunction App() {\n  return <AppRouter />;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}